<div class="maze" id="maze">
  <svg width="100%" height="100%" viewbox="0 0 <%= svg_width(@maze) %> <%= svg_width(@maze) %>">

    <%= Enum.map(Mazes.CircularMaze.rings(@maze), fn %{ring: ring, column_count: column_count, vertices: vertices} -> %>
    <%= if ring == 1 do %>
    <%= center_vertex(@maze, {1, 1}, @settings, @colors) %>
    />
    <% else %>
    <%= Enum.map(vertices, fn vertex -> %>
    <%= vertex(@maze, vertex, column_count, @settings, @colors) %>
    <% end) %>
    <% end %>
    <% end) %>

    <%= Enum.map(Mazes.CircularMaze.rings(@maze), fn %{ring: ring, column_count: column_count, vertices: vertices} -> %>
    <%= if ring > 1 do %>
    <%= Enum.map(vertices, fn vertex -> %>

    <%= if Mazes.Maze.wall?(@maze, vertex, Mazes.CircularMaze.inner(@maze, vertex)) do %>
    <%= inner_wall(@maze, vertex, column_count)  %>
    <% end %>

    <%= if Mazes.Maze.wall?(@maze, vertex, Mazes.CircularMaze.cw(@maze, vertex)) do %>
    <%= cw_wall(@maze, vertex, column_count) %>
    <% end %>

    <%= if ring == @maze.radius do %>
    <%= outer_wall(@maze, vertex, column_count) %>
    <% end %>

    <% end) %>
    <% end %>
    <% end) %>

    <%= if show_solution?(@settings, @solution) do %>
    <%= solution(@maze, @solution, &vertex_center/2) %>
    <% end %>
    <%= solution(@maze, @solution, &vertex_center/2) %>

    <%= if @maze.from && @maze.to do %>
    <%= from_to(@maze, &vertex_center/2) %>
    <% end %>
  </svg>
</div>
